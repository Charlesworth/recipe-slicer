{"version":3,"sources":["Weight.ts","Ingredient.ts","Volume.ts","App.tsx","index.tsx"],"names":["WeightUnit","Ingredient","name","quantity","type","this","clone","cloneToGrams","scalar","scale","VolumeFoodType","VolumeUnit","Weight","unit","amount","scaler","unitDescription","GRAMS_PER_MILLILITER","Map","CONVERSION_TO_MILLILITER","Volume","density","mlAmount","gramAmount","RecipeSlicer","props","startingIngredients","state","ingredients","header","className","onClick","setState","hidden","length","AddIngredient","AddIngredientCallback","ingredient","concat","footer","href","IngredientListDeletable","deletionCallback","index","ingredientsCopy","splice","IngredientList","map","Component","AddWeightIngredient","onChangeName","event","target","value","onChangeWeightUnit","weightUnit","onChangeWeightAmount","weightAmount","valid","weightUnitsOptions","push","htmlFor","onChange","id","placeholder","required","min","step","disabled","AddVolumeIngredient","onChangeVolumeUnit","volumeUnit","onChangeVolumeAmount","volumeAmount","onChangeVolumeFoodType","volumeFoodType","volumeDensity","get","onChangeVolumeDensity","volumeUnitsOptions","volumeFoodTypeOptions","foodType","role","data-bs-toggle","aria-controls","aria-selected","aria-labelledby","ingredientDescription","describe","AdjustedIngredients","onScale","adjustedAmount","totalAmount","reduce","accumulator","originalWeightGrams","scaledIngredientsInGrams","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e82634dd.chunk.js","sourcesContent":["const OUNCES_TO_GRAMS = 28.3495\nconst EGGS_XL_EU_TO_GRAMS = 73\nconst EGGS_LG_EU_TO_GRAMS = 63\nconst EGGS_MD_EU_TO_GRAMS = 53\nconst EGGS_JB_USA_TO_GRAMS = 70.9\nconst EGGS_XL_USA_TO_GRAMS = 63.8\nconst EGGS_LG_USA_TO_GRAMS = 56.7\nconst EGGS_MD_USA_TO_GRAMS = 49.6\nconst EGGS_SM_USA_TO_GRAMS = 42.5\nconst EGGS_PW_USA_TO_GRAMS = 35.4\n\nexport interface WeightInterface {\n    readonly type: 'weight';\n    readonly unit: WeightUnit;\n    readonly amount: number;\n    clone(): WeightInterface;\n    cloneToGrams(): WeightInterface;\n    scale(scaler: number): WeightInterface;\n    describe(): { amount: number, unitDescription: string };\n}\n\nexport enum WeightUnit {\n    'Grams' = 'Grams',\n    'Ounces' = 'Ounces',\n    'Eggs (XL Europe)' = 'Eggs (XL Europe)',\n    'Eggs (Large Europe)' = 'Eggs (Large Europe)',\n    'Eggs (Medium Europe)' = 'Eggs (Medium Europe)',\n    'Eggs (Jumbo USA)' = 'Eggs (Jumbo USA)',\n    'Eggs (XL USA)' = 'Eggs (XL USA)',\n    'Eggs (Large USA)' = 'Eggs (Large USA)',\n    'Eggs (Medium USA)' = 'Eggs (Medium USA)',\n    'Eggs (Small USA)' = 'Eggs (Small USA)',\n    'Eggs (Peewee USA)' = 'Eggs (Peewee USA)',\n}\n\nexport class Weight implements WeightInterface {\n    unit: WeightUnit;\n    amount: number;\n    type: \"weight\";\n\n    constructor(unit: WeightUnit, amount: number) {\n        this.type = 'weight';\n        this.unit = unit;\n        this.amount = amount;\n    }\n\n    scale(scaler: number): Weight {\n        this.amount = this.amount * scaler;\n        return this;\n    }\n\n    cloneToGrams(): Weight {\n        let amount = 0;\n        switch (this.unit) {\n            case WeightUnit['Grams']:\n                amount = this.amount;\n                break;\n            case WeightUnit['Ounces']:\n                amount = this.amount * OUNCES_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (XL Europe)']:\n                amount = this.amount * EGGS_XL_EU_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Large Europe)']:\n                amount = this.amount * EGGS_LG_EU_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Medium Europe)']:\n                amount = this.amount * EGGS_MD_EU_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Jumbo USA)']:\n                amount = this.amount * EGGS_JB_USA_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (XL USA)']:\n                amount = this.amount * EGGS_XL_USA_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Large USA)']:\n                amount = this.amount * EGGS_LG_USA_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Medium USA)']:\n                amount = this.amount * EGGS_MD_USA_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Small USA)']:\n                amount = this.amount * EGGS_SM_USA_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Peewee USA)']:\n                amount = this.amount * EGGS_PW_USA_TO_GRAMS;\n                break;\n        }\n        return new Weight(WeightUnit['Grams'], amount);\n    }\n\n    describe(): { amount: number, unitDescription: string } {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        return { amount: this.amount, unitDescription: `${this.unit}` }\n    }\n\n    clone(): Weight {\n        return new Weight(this.unit, this.amount)\n    }\n}\n","export interface IngredientInterface {\n    readonly type: \"ingredient\";\n    readonly name: string;\n    readonly quantity: QuantityInterface;\n    clone(): IngredientInterface;\n    cloneToGrams(): IngredientInterface;\n    scale(scalar: number): IngredientInterface;\n}\n\nexport interface QuantityInterface {\n    readonly type: string;\n    clone(): QuantityInterface;\n    cloneToGrams(): QuantityInterface;\n    scale(scaler: number): QuantityInterface;\n    describe(): { amount: number, unitDescription: string };\n}\n\nexport class Ingredient implements IngredientInterface {\n    type: \"ingredient\";\n    name: string;\n    quantity: QuantityInterface;\n\n    constructor(name: string, quantity: QuantityInterface) {\n        this.type = \"ingredient\";\n        this.name = name;\n        this.quantity = quantity;\n    }\n\n    clone(): Ingredient {\n        return new Ingredient(this.name, this.quantity.clone())\n    }\n\n    cloneToGrams(): Ingredient {\n        return new Ingredient(this.name, this.quantity.cloneToGrams());\n    }\n\n    scale(scalar: number): Ingredient {\n        this.quantity.scale(scalar);\n        return this;\n    }\n}\n","import { Weight, WeightInterface, WeightUnit } from \"./Weight\";\n\nexport interface VolumeInterface {\n    readonly type: 'volume';\n    readonly unit: VolumeUnit;\n    readonly amount: number;\n    clone(): VolumeInterface;\n    cloneToGrams(): WeightInterface;\n    scale(scaler: number): VolumeInterface;\n    describe(): { amount: number, unitDescription: string };\n}\n\nexport enum VolumeFoodType {\n    'custom' = 'custom',\n    'baking powder' = \"baking powder\",\n    'baking soda' = \"baking soda\",\n    'salt' = \"salt\",\n    'yeast' = \"yeast\",\n    'sugar' = \"sugar\",\n    'all purpose flour' = \"all purpose flour\",\n    'bread flour' = \"bread flour\",\n    'water' = \"water\",\n    'butter' = \"butter\",\n    'milk' = \"milk\",\n    'cocoa powder' = \"cocoa powder\",\n    'yogurt' = \"yogurt\",\n}\n\nexport enum VolumeUnit {\n    'Milliliter' = 'Milliliter',\n    'Pint (US)' = 'Pint (US)',\n    'Cup (US)' = 'Cup (US)',\n    'Fluid Ounce (US)' = 'Fluid Ounce (US)',\n    'Tablespoon (US)' = 'Tablespoon (US)',\n    'Teaspoon (US)' = 'Teaspoon (US)',\n    'Pint (Imperial)' = 'Pint (Imperial)',\n    'Cup (Imperial)' = 'Cup (Imperial)',\n    'Fluid Ounce (Imperial)' = 'Fluid Ounce (Imperial)',\n    'Tablespoon (Imperial)' = 'Tablespoon (Imperial)',\n    'Teaspoon (Imperial)' = 'Teaspoon (Imperial)',\n}\n\nexport const GRAMS_PER_MILLILITER = new Map([\n    ['baking powder', 0.9],\n    ['baking soda', 0.689],\n    ['salt', 1.201],\n    ['yeast', 0.95],\n    ['sugar', 0.849],\n    ['all purpose flour', 0.529],\n    ['bread flour', 0.55],\n    ['water', 1],\n    ['butter', 0.959],\n    ['milk', 1.035],\n    ['cocoa powder', 0.641],\n    ['yogurt', 1.06],\n]);\n\nconst CONVERSION_TO_MILLILITER = {\n    'Pint (US)': 473.176,\n    'Cup (US)': 240,\n    'Fluid Ounce (US)': 29.5735,\n    'Tablespoon (US)': 14.7868,\n    'Teaspoon (US)': 4.92892,\n    'Pint (Imperial)': 568.261,\n    'Cup (Imperial)': 284.131,\n    'Fluid Ounce (Imperial)': 28.4131,\n    'Tablespoon (Imperial)': 17.7582,\n    'Teaspoon (Imperial)': 5.91939,\n}\n\nexport class Volume implements VolumeInterface {\n    type: \"volume\";\n    unit: VolumeUnit;\n    amount: number;\n    density: number;\n\n    constructor(unit: VolumeUnit, amount: number, density: number) {\n        this.type = \"volume\";\n        this.unit = unit;\n        this.amount = amount;\n        this.density = density;\n    }\n\n    scale(scaler: number): Volume {\n        this.amount = this.amount * scaler;\n        return this;\n    }\n\n    cloneToGrams(): WeightInterface {\n        let mlAmount = 0;\n        switch (this.unit) {\n            case VolumeUnit['Milliliter']:\n                mlAmount = this.amount\n                break;\n            case VolumeUnit['Pint (US)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Pint (US)'];\n                break;\n            case VolumeUnit['Cup (US)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Cup (US)'];\n                break;\n            case VolumeUnit['Fluid Ounce (US)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Fluid Ounce (US)'];\n                break;\n            case VolumeUnit['Tablespoon (US)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Tablespoon (US)'];\n                break;\n            case VolumeUnit['Teaspoon (US)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Teaspoon (US)'];\n                break;\n            case VolumeUnit['Pint (Imperial)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Pint (Imperial)'];\n                break;\n            case VolumeUnit['Cup (Imperial)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Cup (Imperial)'];\n                break;\n            case VolumeUnit['Fluid Ounce (Imperial)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Fluid Ounce (Imperial)'];\n                break;\n            case VolumeUnit['Tablespoon (Imperial)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Tablespoon (Imperial)'];\n                break;\n            case VolumeUnit['Teaspoon (Imperial)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Teaspoon (Imperial)'];\n                break;\n        }\n\n        const gramAmount = mlAmount * this.density;\n        return new Weight(WeightUnit['Grams'], gramAmount);\n    }\n\n    describe(): { amount: number, unitDescription: string } {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        return { amount: this.amount, unitDescription: `${this.unit} at ${this.density} Grams per Milliliter` }\n    }\n\n    clone(): Volume {\n        return new Volume(this.unit, this.amount, this.density)\n    }\n}\n","import React, { Component } from 'react';\nimport { Ingredient, IngredientInterface } from './Ingredient';\nimport { GRAMS_PER_MILLILITER, Volume, VolumeFoodType, VolumeUnit } from './Volume';\nimport { Weight, WeightUnit } from './Weight';\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"container py-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <RecipeSlicer />\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface RecipeSlicerState {\n  ingredients: IngredientInterface[];\n}\n\ninterface RecipeSlicerProps {\n  startingIngredients?: IngredientInterface[];\n}\n\nclass RecipeSlicer extends Component<RecipeSlicerProps, RecipeSlicerState> {\n  constructor(props: RecipeSlicerProps) {\n    super(props);\n\n    if (props.startingIngredients) {\n      this.state = {\n        ingredients: props.startingIngredients\n      }\n    } else {\n      this.state = {\n        ingredients: []\n      }\n    }\n  }\n\n  render(): JSX.Element {\n    const header = <>\n      <h1>Recipe Slicer</h1>\n      <h4>Convert recipes into grams and scale the total mix weight</h4>\n      <label>i.e. enter a giant cake mix in cups and fluid ounces, get out a recipe in grams that you can scale down to a cupcake size</label>\n      <br />\n\n      <button\n        className=\"btn btn-lg btn-danger\"\n        onClick={() => { this.setState({ ingredients: [] }) }}\n        hidden={this.state.ingredients.length === 0}\n      >\n        Clear Recipe\n      </button>\n      <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n        <h2>Add new ingredient</h2>\n        <AddIngredient\n          AddIngredientCallback={(ingredient: IngredientInterface) => {\n            this.setState({ ingredients: this.state.ingredients.concat(ingredient) })\n          }}\n        />\n      </div>\n    </>\n\n    const footer = <div className=\"border border-3 border-dark bg-light p-3 my-2 text-center\">\n      <h2>Feedback</h2>\n      <h4>\n        Like the tool? Have a feature or change suggestion? Found a bug?\n        <br />\n        Get in touch, I'd love to hear more: <a href=\"mailto:charlie@immaterium.ltd\">charlie@immaterium.ltd</a>\n      </h4>\n    </div>\n\n    if (this.state.ingredients.length === 0) {\n      return <>\n        {header}\n        {footer}\n      </>;\n    }\n    return (\n      <>\n        {header}\n\n        <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n          <h2>Original Ingredient Measurements</h2>\n          <IngredientListDeletable ingredients={this.state.ingredients} deletionCallback={(index: number) => {\n            const ingredientsCopy = [...this.state.ingredients]\n            ingredientsCopy.splice(index, 1)\n            this.setState({ ingredients: ingredientsCopy })\n          }} />\n        </div>\n\n        <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n          <h2>Ingredient amounts in Grams</h2>\n          <IngredientList ingredients={this.state.ingredients.map((ingredient) => { return ingredient.cloneToGrams() })} />\n        </div>\n\n        <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n          <h2>Scaled Ingredients</h2>\n          <AdjustedIngredients ingredients={this.state.ingredients} />\n        </div>\n\n        {footer}\n      </>\n    );\n  }\n}\n\ninterface AddIngredientProps {\n  AddIngredientCallback: (ingredient: IngredientInterface) => void;\n}\n\ninterface AddWeightIngredientState {\n  name: string;\n  weightUnit: WeightUnit;\n  weightAmount: number\n}\n\nclass AddWeightIngredient extends Component<AddIngredientProps, AddWeightIngredientState> {\n  constructor(props: AddIngredientProps) {\n    super(props);\n\n    this.state = {\n      name: '',\n      weightUnit: WeightUnit['Grams'],\n      weightAmount: 1,\n    }\n  }\n\n  onChangeName = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ name: event.target.value })\n  }\n\n  onChangeWeightUnit = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n    this.setState({ weightUnit: event.target.value as WeightUnit })\n  }\n\n  onChangeWeightAmount = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ weightAmount: +event.target.value })\n  }\n\n  valid = (): boolean => {\n    if ((this.state.name !== \"\") && (this.state.weightAmount > 0)) {\n      return false\n    }\n    return true\n  }\n\n  render(): JSX.Element {\n    const weightUnitsOptions: JSX.Element[] = []\n    for (const unit in WeightUnit) {\n      weightUnitsOptions.push(<option value={unit} key={unit}>{unit}</option>)\n    }\n\n    return (\n      <>\n        <div className=\"my-2\">\n          <label htmlFor=\"newIngredientName\" className=\"form-label\">Ingredient name:</label>\n          <input value={this.state.name} onChange={this.onChangeName} type=\"text\" className=\"form-control\" id=\"newIngredientName\" placeholder=\"e.g. flour, butter, salt...\" required />\n        </div>\n\n        <div className=\"mb-2\">\n          <label htmlFor=\"newIngredientUnit\" className=\"form-label\">Unit of weight:</label>\n          <select value={this.state.weightUnit} onChange={this.onChangeWeightUnit} id=\"newIngredientUnit\" className=\"form-select\">\n            {weightUnitsOptions}\n          </select>\n        </div>\n\n        <div className=\"mb-3\">\n          <label htmlFor=\"newIngredientAmount\" className=\"form-label\">Amount:</label>\n          <input value={this.state.weightAmount} onChange={this.onChangeWeightAmount} type=\"number\" min=\"0\" className=\"form-control\" id=\"newIngredientAmount\" placeholder=\"e.g. 2.5, 100...\" step=\"0.1\" required />\n        </div>\n\n        <button\n          className=\"btn btn-success\"\n          onClick={() => {\n            this.props.AddIngredientCallback(new Ingredient(\n              this.state.name,\n              new Weight(this.state.weightUnit, this.state.weightAmount),\n            ));\n          }}\n          disabled={this.valid()}\n        >\n          add ingredient\n        </button>\n      </>\n    );\n  }\n}\n\ninterface AddVolumeIngredientState {\n  name: string;\n  volumeUnit: VolumeUnit;\n  volumeAmount: number\n  volumeFoodType: VolumeFoodType;\n  volumeDensity: number;\n}\n\nclass AddVolumeIngredient extends Component<AddIngredientProps, AddVolumeIngredientState> {\n  constructor(props: AddIngredientProps) {\n    super(props);\n\n    this.state = {\n      name: '',\n      volumeUnit: VolumeUnit['Milliliter'],\n      volumeAmount: 1,\n      volumeFoodType: VolumeFoodType['custom'],\n      volumeDensity: 1,\n    }\n  }\n\n  onChangeName = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ name: event.target.value })\n  }\n\n  onChangeVolumeUnit = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n    this.setState({ volumeUnit: event.target.value as VolumeUnit })\n  }\n\n  onChangeVolumeAmount = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ volumeAmount: +event.target.value })\n  }\n\n  onChangeVolumeFoodType = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n    if (event.target.value !== \"custom\") {\n      this.setState({ volumeFoodType: event.target.value as VolumeFoodType, volumeDensity: GRAMS_PER_MILLILITER.get(event.target.value) || 1 })\n    } else {\n      this.setState({ volumeFoodType: event.target.value as VolumeFoodType })\n    }\n  }\n\n  onChangeVolumeDensity = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ volumeDensity: +event.target.value })\n  }\n\n  valid = (): boolean => {\n    if ((this.state.name !== \"\") && (this.state.volumeAmount > 0)) {\n      return false\n    }\n    return true\n  }\n\n  render(): JSX.Element {\n    const volumeUnitsOptions: JSX.Element[] = []\n    for (const unit in VolumeUnit) {\n      volumeUnitsOptions.push(<option value={unit} key={unit}>{unit}</option>)\n    }\n\n    const volumeFoodTypeOptions: JSX.Element[] = []\n    for (const foodType in VolumeFoodType) {\n      volumeFoodTypeOptions.push(<option value={foodType} key={foodType}>{foodType}</option>)\n    }\n\n    return (\n      <>\n        <div className=\"my-2\">\n          <label htmlFor=\"newVolumeIngredientName\" className=\"form-label\">Ingredient name:</label>\n          <input value={this.state.name} onChange={this.onChangeName} type=\"text\" className=\"form-control\" id=\"newVolumeIngredientName\" placeholder=\"e.g. milk, baking powder, salt...\" required />\n        </div>\n\n        <div className=\"mb-2\">\n          <label htmlFor=\"newVolumeIngredientUnit\" className=\"form-label\">Unit of volume:</label>\n          <select value={this.state.volumeUnit} onChange={this.onChangeVolumeUnit} id=\"newVolumeIngredientUnit\" className=\"form-select\">\n            {volumeUnitsOptions}\n          </select>\n        </div>\n\n        <div className=\"mb-3\">\n          <label htmlFor=\"newVolumeIngredientAmount\" className=\"form-label\">Amount:</label>\n          <input value={this.state.volumeAmount} onChange={this.onChangeVolumeAmount} type=\"number\" min=\"0\" className=\"form-control\" id=\"newVolumeIngredientAmount\" placeholder=\"e.g. 2.5, 100...\" step=\"0.1\" required />\n        </div>\n\n        <div className=\"mb-2\">\n          <label htmlFor=\"newVolumeIngredientFoodType\" className=\"form-label\">Type of food (used for density):</label>\n          <select value={this.state.volumeFoodType} onChange={this.onChangeVolumeFoodType} id=\"newVolumeIngredientFoodType\" className=\"form-select\">\n            {volumeFoodTypeOptions}\n          </select>\n        </div>\n\n        <div className=\"mb-3\">\n          <label htmlFor=\"newVolumeIngredientDensity\" className=\"form-label\">Density (Grams per Milliliter):</label>\n          <input disabled={this.state.volumeFoodType !== \"custom\"} value={this.state.volumeDensity} onChange={this.onChangeVolumeDensity} type=\"number\" min=\"0\" className=\"form-control\" id=\"newVolumeIngredientDensity\" placeholder=\"e.g. 2.5, 100...\" step=\"0.1\" required />\n          <div id=\"newVolumeIngredientDensity\" className=\"form-text\">Set \"Type of food\" to custom to manually edit this amount</div>\n        </div>\n\n        <button\n          className=\"btn btn-success\"\n          onClick={() => {\n            this.props.AddIngredientCallback(new Ingredient(\n              this.state.name,\n              new Volume(this.state.volumeUnit, this.state.volumeAmount, this.state.volumeDensity),\n            ));\n          }}\n          disabled={this.valid()}\n        >\n          add ingredient\n        </button>\n      </>\n    )\n  }\n}\n\nfunction AddIngredient(props: AddIngredientProps): JSX.Element {\n  return (\n    <>\n      <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n        <li className=\"nav-item\" role=\"presentation\">\n          <a className=\"nav-link active\" id=\"weight-tab\" data-bs-toggle=\"tab\" href=\"#weight\" role=\"tab\" aria-controls=\"weight\" aria-selected=\"true\">Add Weight</a>\n        </li>\n        <li className=\"nav-item\" role=\"presentation\">\n          <a className=\"nav-link\" id=\"volume-tab\" data-bs-toggle=\"tab\" href=\"#volume\" role=\"tab\" aria-controls=\"volume\" aria-selected=\"false\">Add Volume</a>\n        </li>\n      </ul>\n\n      <div className=\"tab-content\" id=\"myTabContent\">\n\n        <div className=\"tab-pane fade show active\" id=\"weight\" role=\"tabpanel\" aria-labelledby=\"weight-tab\">\n          <AddWeightIngredient AddIngredientCallback={props.AddIngredientCallback} />\n        </div>\n\n        <div className=\"tab-pane fade\" id=\"volume\" role=\"tabpanel\" aria-labelledby=\"volume-tab\">\n          <AddVolumeIngredient AddIngredientCallback={props.AddIngredientCallback} />\n        </div>\n\n      </div>\n    </>\n  );\n}\n\nfunction ingredientDescription(ingredient: IngredientInterface): string {\n  const { amount, unitDescription } = ingredient.quantity.describe();\n  return `${ingredient.name} = ${amount} (${unitDescription})`;\n}\n\nfunction IngredientList(props: { ingredients: IngredientInterface[] }): JSX.Element {\n  return (\n    <ul>\n      {props.ingredients.map((ingredient, index) => <li key={index}>{ingredientDescription(ingredient)}</li>)}\n    </ul>\n  );\n}\n\nfunction IngredientListDeletable(props: { ingredients: IngredientInterface[], deletionCallback: (index: number) => void }): JSX.Element {\n  return (\n    <ul>\n      {props.ingredients.map((ingredient, index) => {\n        return <li className=\"mb-1\" key={index}>{ingredientDescription(ingredient)} <button className=\"btn btn-sm btn-danger\" onClick={() => { props.deletionCallback(index) }}>remove</button></li>\n      })}\n    </ul>\n  );\n}\n\ninterface AdjustedIngredientsProps {\n  ingredients: IngredientInterface[];\n}\n\ninterface AdjustedIngredientsState {\n  adjustedAmount: number;\n}\n\nclass AdjustedIngredients extends Component<AdjustedIngredientsProps, AdjustedIngredientsState> {\n  constructor(props: AdjustedIngredientsProps) {\n    super(props);\n\n    this.state = {\n      adjustedAmount: 100\n    }\n  }\n\n  onScale = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ adjustedAmount: +event.target.value })\n  }\n\n  totalAmount = (ingredients: IngredientInterface[]): number => {\n    return ingredients.reduce<number>(\n      (accumulator, ingredient) => { return accumulator + ingredient.quantity.cloneToGrams().describe().amount },\n      0,\n    )\n  }\n\n  render(): JSX.Element {\n    if (this.props.ingredients.length === 0)\n      return <></>;\n\n    const ingredientsInGrams = this.props.ingredients.map((ingredient: IngredientInterface): IngredientInterface => {\n      return ingredient.cloneToGrams();\n    })\n\n    const originalWeightGrams = ingredientsInGrams.reduce<number>(\n      (accumulator, ingredient) => { return accumulator + ingredient.quantity.describe().amount },\n      0,\n    )\n\n    const scaler = this.state.adjustedAmount / originalWeightGrams;\n\n    const scaledIngredientsInGrams = this.props.ingredients.map((ingredient: IngredientInterface): IngredientInterface => {\n      return ingredient.cloneToGrams().scale(scaler);\n    })\n\n    return (\n      <>\n        <p>Unaltered total weight (g): {originalWeightGrams}</p>\n\n        <div className=\"mb-2\">\n          <label htmlFor=\"desiredAmountInput\" className=\"form-label\">Desired total weight (g):</label>\n          <input value={this.state.adjustedAmount} onChange={this.onScale} type=\"number\" className=\"form-control\" id=\"desiredAmountInput\" min=\"0.1\" step=\"0.1\" required />\n        </div>\n\n        <h4>Adjusted ingredients:</h4>\n\n        <IngredientList ingredients={scaledIngredientsInGrams} />\n      </>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}