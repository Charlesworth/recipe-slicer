{"version":3,"sources":["Weight.ts","Ingredient.ts","Volume.ts","App.tsx","index.tsx"],"names":["WeightUnit","Ingredient","name","quantity","type","this","clone","cloneToGrams","scalar","scale","VolumeFoodType","WeightUnitNames","Map","grams","ounces","eggs_xl_eu","eggs_lg_eu","eggs_md_eu","eggs_jb_usa","eggs_xl_usa","eggs_lg_usa","eggs_md_usa","eggs_sm_usa","eggs_pw_usa","Weight","unit","amount","scaler","unitDescription","get","VolumeUnit","VolumeFoodTypeNames","bakingPowder","bakingSoda","salt","yeast","sugar","allPurposeFlour","breadFlour","water","butter","milk","cocoaPowder","yogurt","VolumeUnitNames","milliliter","usPint","usCup","usFluidOunce","usTableSpoon","usTeaSpoon","imperialPint","imperialCup","imperialFluidOunce","imperialTableSpoon","imperialTeaSpoon","GRAMS_PER_MILLILITER","CONVERSION_TO_MILLILITER","Volume","foodType","mlAmount","gramAmount","RecipeSlicer","props","startingIngredients","state","ingredients","header","className","onClick","setState","hidden","length","AddIngredient","AddIngredientCallback","ingredient","concat","IngredientListDeletable","deletionCallback","index","ingredientsCopy","splice","IngredientList","map","Component","AddWeightIngredient","onChangeName","event","target","value","onChangeWeightUnit","weightUnit","onChangeWeightAmount","weightAmount","valid","weightUnitsOptions","push","htmlFor","onChange","id","placeholder","required","min","step","disabled","AddVolumeIngredient","onChangeVolumeUnit","volumeUnit","onChangeVolumeAmount","volumeAmount","onChangeVolumeFoodType","volumeFoodType","volumeUnitsOptions","volumeFoodTypeOptions","role","data-bs-toggle","href","aria-controls","aria-selected","aria-labelledby","ingredientDescription","describe","AdjustedIngredients","onScale","adjustedAmount","totalAmount","reduce","accumulator","originalWeightGrams","scaledIngredientsInGrams","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d267b4ee.chunk.js","sourcesContent":["const OUNCES_TO_GRAMS = 28.3495\nconst EGGS_XL_EU_TO_GRAMS = 73\nconst EGGS_LG_EU_TO_GRAMS = 63\nconst EGGS_MD_EU_TO_GRAMS = 53\nconst EGGS_JB_USA_TO_GRAMS = 70.9\nconst EGGS_XL_USA_TO_GRAMS = 63.8\nconst EGGS_LG_USA_TO_GRAMS = 56.7\nconst EGGS_MD_USA_TO_GRAMS = 49.6\nconst EGGS_SM_USA_TO_GRAMS = 42.5\nconst EGGS_PW_USA_TO_GRAMS = 35.4\n\nexport interface WeightInterface {\n    readonly type: 'weight';\n    readonly unit: WeightUnit;\n    readonly amount: number;\n    clone(): WeightInterface;\n    cloneToGrams(): WeightInterface;\n    scale(scaler: number): WeightInterface;\n    describe(): { amount: number, unitDescription: string };\n}\n\nexport enum WeightUnit {\n    grams = \"grams\",\n    ounces = \"ounces\",\n    eggs_xl_eu = \"eggs_xl_eu\",\n    eggs_lg_eu = \"eggs_lg_eu\",\n    eggs_md_eu = \"eggs_md_eu\",\n    eggs_jb_usa = \"eggs_jb_usa\",\n    eggs_xl_usa = \"eggs_xl_usa\",\n    eggs_lg_usa = \"eggs_lg_usa\",\n    eggs_md_usa = \"eggs_md_usa\",\n    eggs_sm_usa = \"eggs_sm_usa\",\n    eggs_pw_usa = \"eggs_pw_usa\",\n}\n\nexport const WeightUnitNames = new Map<string, string>([\n    [WeightUnit.grams, 'Grams'],\n    [WeightUnit.ounces, 'Ounces'],\n    [WeightUnit.eggs_xl_eu, 'Eggs (XL Europe)'],\n    [WeightUnit.eggs_lg_eu, 'Eggs (Large Europe)'],\n    [WeightUnit.eggs_md_eu, 'Eggs (Medium Europe)'],\n    [WeightUnit.eggs_jb_usa, 'Eggs (Jumbo USA)'],\n    [WeightUnit.eggs_xl_usa, 'Eggs (XL USA)'],\n    [WeightUnit.eggs_lg_usa, 'Eggs (Large USA)'],\n    [WeightUnit.eggs_md_usa, 'Eggs (Medium USA)'],\n    [WeightUnit.eggs_sm_usa, 'Eggs (Small USA)'],\n    [WeightUnit.eggs_pw_usa, 'Eggs (Peewee USA)'],\n]);\n\nexport class Weight implements WeightInterface {\n    unit: WeightUnit;\n    amount: number;\n    type: \"weight\";\n\n    constructor(unit: WeightUnit, amount: number) {\n        this.type = 'weight';\n        this.unit = unit;\n        this.amount = amount;\n    }\n\n    scale(scaler: number): Weight {\n        this.amount = this.amount * scaler;\n        return this;\n    }\n\n    cloneToGrams(): Weight {\n        let amount = 0;\n        switch (this.unit) {\n            case WeightUnit.grams:\n                amount = this.amount;\n                break;\n            case WeightUnit.ounces:\n                amount = this.amount * OUNCES_TO_GRAMS;\n                break;\n            case WeightUnit.eggs_xl_eu:\n                amount = this.amount * EGGS_XL_EU_TO_GRAMS;\n                break;\n            case WeightUnit.eggs_lg_eu:\n                amount = this.amount * EGGS_LG_EU_TO_GRAMS;\n                break;\n            case WeightUnit.eggs_md_eu:\n                amount = this.amount * EGGS_MD_EU_TO_GRAMS;\n                break;\n            case WeightUnit.eggs_jb_usa:\n                amount = this.amount * EGGS_JB_USA_TO_GRAMS;\n                break;\n            case WeightUnit.eggs_xl_usa:\n                amount = this.amount * EGGS_XL_USA_TO_GRAMS;\n                break;\n            case WeightUnit.eggs_lg_usa:\n                amount = this.amount * EGGS_LG_USA_TO_GRAMS;\n                break;\n            case WeightUnit.eggs_md_usa:\n                amount = this.amount * EGGS_MD_USA_TO_GRAMS;\n                break;\n            case WeightUnit.eggs_sm_usa:\n                amount = this.amount * EGGS_SM_USA_TO_GRAMS;\n                break;\n            case WeightUnit.eggs_pw_usa:\n                amount = this.amount * EGGS_PW_USA_TO_GRAMS;\n                break;\n        }\n        return new Weight(WeightUnit.grams, amount);\n    }\n\n    describe(): { amount: number, unitDescription: string } {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        return { amount: this.amount, unitDescription: `${WeightUnitNames.get(this.unit)}` }\n    }\n\n    clone(): Weight {\n        return new Weight(this.unit, this.amount)\n    }\n}\n","export interface IngredientInterface {\n    readonly type: \"ingredient\";\n    readonly name: string;\n    readonly quantity: QuantityInterface;\n    clone(): IngredientInterface;\n    cloneToGrams(): IngredientInterface;\n    scale(scalar: number): IngredientInterface;\n}\n\nexport interface QuantityInterface {\n    readonly type: string;\n    clone(): QuantityInterface;\n    cloneToGrams(): QuantityInterface;\n    scale(scaler: number): QuantityInterface;\n    describe(): { amount: number, unitDescription: string };\n}\n\nexport class Ingredient implements IngredientInterface {\n    type: \"ingredient\";\n    name: string;\n    quantity: QuantityInterface;\n\n    constructor(name: string, quantity: QuantityInterface) {\n        this.type = \"ingredient\";\n        this.name = name;\n        this.quantity = quantity;\n    }\n\n    clone(): Ingredient {\n        return new Ingredient(this.name, this.quantity.clone())\n    }\n\n    cloneToGrams(): Ingredient {\n        return new Ingredient(this.name, this.quantity.cloneToGrams());\n    }\n\n    scale(scalar: number): Ingredient {\n        this.quantity.scale(scalar);\n        return this;\n    }\n}\n","import { Weight, WeightInterface, WeightUnit } from \"./Weight\";\n\nexport interface VolumeInterface {\n    readonly type: 'volume';\n    readonly unit: VolumeUnit;\n    readonly amount: number;\n    readonly foodType: VolumeFoodType;\n    clone(): VolumeInterface;\n    cloneToGrams(): WeightInterface;\n    scale(scaler: number): VolumeInterface;\n    describe(): { amount: number, unitDescription: string };\n}\n\nexport enum VolumeFoodType {\n    bakingPowder = \"bakingPowder\",\n    bakingSoda = \"bakingSoda\",\n    salt = \"salt\",\n    yeast = \"yeast\",\n    sugar = \"sugar\",\n    allPurposeFlour = \"allPurposeFlour\",\n    breadFlour = \"breadFlour\",\n    water = \"water\",\n    butter = \"butter\",\n    milk = \"milk\",\n    cocoaPowder = \"cocoaPowder\",\n    yogurt = \"yogurt\",\n}\n\nexport const VolumeFoodTypeNames = new Map<string, string>([\n    [VolumeFoodType.bakingPowder, 'baking powder'],\n    [VolumeFoodType.bakingSoda, 'baking soda'],\n    [VolumeFoodType.salt, 'salt'],\n    [VolumeFoodType.yeast, 'yeast'],\n    [VolumeFoodType.sugar, 'sugar'],\n    [VolumeFoodType.allPurposeFlour, 'all purpose flour'],\n    [VolumeFoodType.breadFlour, 'bread flour'],\n    [VolumeFoodType.water, 'water'],\n    [VolumeFoodType.butter, 'butter'],\n    [VolumeFoodType.milk, 'milk'],\n    [VolumeFoodType.cocoaPowder, 'cocoa powder'],\n    [VolumeFoodType.yogurt, 'yogurt'],\n]);\n\nexport enum VolumeUnit {\n    milliliter = \"milliliter\",\n    usPint = \"usPint\",\n    usCup = \"usCup\",\n    usFluidOunce = \"usFluidOunce\",\n    usTableSpoon = \"usTableSpoon\",\n    usTeaSpoon = \"usTeaSpoon\",\n    imperialPint = \"imperialPint\",\n    imperialCup = \"imperialCup\",\n    imperialFluidOunce = \"imperialFluidOunce\",\n    imperialTableSpoon = \"imperialTableSpoon\",\n    imperialTeaSpoon = \"imperialTeaSpoon\",\n}\n\nexport const VolumeUnitNames = new Map<string, string>([\n    [VolumeUnit.milliliter, 'Milliliter'],\n    [VolumeUnit.usPint, 'Pint (US)'],\n    [VolumeUnit.usCup, 'Cup (US)'],\n    [VolumeUnit.usFluidOunce, 'Fluid Ounce (US)'],\n    [VolumeUnit.usTableSpoon, 'Tablespoon (US)'],\n    [VolumeUnit.usTeaSpoon, 'Teaspoon (US)'],\n    [VolumeUnit.imperialPint, 'Pint (Imperial)'],\n    [VolumeUnit.imperialCup, 'Cup (Imperial)'],\n    [VolumeUnit.imperialFluidOunce, 'Fluid Ounce (Imperial)'],\n    [VolumeUnit.imperialTableSpoon, 'Tablespoon (Imperial)'],\n    [VolumeUnit.imperialTeaSpoon, 'Teaspoon (Imperial)'],\n]);\n\nconst GRAMS_PER_MILLILITER = {\n    bakingPowder: 0.9,\n    bakingSoda: 0.689,\n    salt: 1.201,\n    yeast: 0.95,\n    sugar: 0.849,\n    allPurposeFlour: 0.529,\n    breadFlour: 0.55,\n    water: 1,\n    butter: 0.959,\n    milk: 1.035,\n    cocoaPowder: 0.641,\n    yogurt: 1.06,\n}\n\nconst CONVERSION_TO_MILLILITER = {\n    usPint: 473.176,\n    usCup: 240,\n    usFluidOunce: 29.5735,\n    usTableSpoon: 14.7868,\n    usTeaSpoon: 4.92892,\n    imperialPint: 568.261,\n    imperialCup: 284.131,\n    imperialFluidOunce: 28.4131,\n    imperialTableSpoon: 17.7582,\n    imperialTeaSpoon: 5.91939,\n}\n\nexport class Volume implements VolumeInterface {\n    type: \"volume\";\n    unit: VolumeUnit;\n    amount: number;\n    foodType: VolumeFoodType;\n\n    constructor(unit: VolumeUnit, amount: number, foodType: VolumeFoodType) {\n        this.type = \"volume\";\n        this.unit = unit;\n        this.amount = amount;\n        this.foodType = foodType;\n    }\n\n    scale(scaler: number): Volume {\n        this.amount = this.amount * scaler;\n        return this;\n    }\n\n    cloneToGrams(): WeightInterface {\n        let mlAmount = 0;\n        switch (this.unit) {\n            case VolumeUnit.milliliter:\n                mlAmount = this.amount\n                break;\n            case VolumeUnit.usPint:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER.usPint;\n                break;\n            case VolumeUnit.usCup:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER.usCup;\n                break;\n            case VolumeUnit.usFluidOunce:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER.usFluidOunce;\n                break;\n            case VolumeUnit.usTableSpoon:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER.usTableSpoon;\n                break;\n            case VolumeUnit.usTeaSpoon:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER.usTeaSpoon;\n                break;\n            case VolumeUnit.imperialPint:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER.imperialPint;\n                break;\n            case VolumeUnit.imperialCup:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER.imperialCup;\n                break;\n            case VolumeUnit.imperialFluidOunce:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER.imperialFluidOunce;\n                break;\n            case VolumeUnit.imperialTableSpoon:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER.imperialTableSpoon;\n                break;\n            case VolumeUnit.imperialTeaSpoon:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER.imperialTeaSpoon;\n                break;\n        }\n\n        const gramAmount = mlAmount * GRAMS_PER_MILLILITER[this.foodType];\n        return new Weight(WeightUnit.grams, gramAmount);\n    }\n\n    describe(): { amount: number, unitDescription: string } {\n        // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n        return { amount: this.amount, unitDescription: `${VolumeUnitNames.get(this.unit)} of ${VolumeFoodTypeNames.get(this.foodType)}` }\n    }\n\n    clone(): Volume {\n        return new Volume(this.unit, this.amount, this.foodType)\n    }\n}\n","import React, { Component } from 'react';\nimport { Ingredient, IngredientInterface } from './Ingredient';\nimport { Volume, VolumeFoodType, VolumeFoodTypeNames, VolumeUnit, VolumeUnitNames } from './Volume';\nimport { Weight, WeightUnit, WeightUnitNames } from './Weight';\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"container py-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <RecipeSlicer />\n        </div>\n      </div>\n    </div>\n  );\n}\n\ninterface RecipeSlicerState {\n  ingredients: IngredientInterface[];\n}\n\ninterface RecipeSlicerProps {\n  startingIngredients?: IngredientInterface[];\n}\n\nclass RecipeSlicer extends Component<RecipeSlicerProps, RecipeSlicerState> {\n  constructor(props: RecipeSlicerProps) {\n    super(props);\n\n    if (props.startingIngredients) {\n      this.state = {\n        ingredients: props.startingIngredients\n      }\n    } else {\n      this.state = {\n        ingredients: []\n      }\n    }\n  }\n\n  render(): JSX.Element {\n    const header = <>\n      <h1>Recipe Slicer</h1>\n      <h4>Convert recipes into grams and scale the total mix weight</h4>\n      <label>i.e. enter a giant cake mix in cups and fluid ounces, get out a recipe in grams that you can scale down to a cupcake size</label>\n      <br />\n      <button\n        className=\"btn btn-lg btn-danger\"\n        onClick={() => { this.setState({ ingredients: [] }) }}\n        hidden={this.state.ingredients.length === 0}\n      >\n        Clear Recipe\n      </button>\n      <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n        <h2>Add new ingredient</h2>\n        <AddIngredient\n          AddIngredientCallback={(ingredient: IngredientInterface) => {\n            this.setState({ ingredients: this.state.ingredients.concat(ingredient) })\n          }}\n        />\n      </div>\n    </>\n\n    if (this.state.ingredients.length === 0) {\n      return header;\n    }\n    return (\n      <>\n        {header}\n\n        <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n          <h2>Original Ingredient Measurements</h2>\n          <IngredientListDeletable ingredients={this.state.ingredients} deletionCallback={(index: number) => {\n            const ingredientsCopy = [...this.state.ingredients]\n            ingredientsCopy.splice(index, 1)\n            this.setState({ ingredients: ingredientsCopy })\n          }} />\n        </div>\n\n        <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n          <h2>Ingredient amounts in Grams</h2>\n          <IngredientList ingredients={this.state.ingredients.map((ingredient) => { return ingredient.cloneToGrams() })} />\n        </div>\n\n        <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n          <h2>Scaled Ingredients</h2>\n          <AdjustedIngredients ingredients={this.state.ingredients} />\n        </div>\n      </>\n    );\n  }\n}\n\ninterface AddIngredientProps {\n  AddIngredientCallback: (ingredient: IngredientInterface) => void;\n}\n\ninterface AddWeightIngredientState {\n  name: string;\n  weightUnit: WeightUnit;\n  weightAmount: number\n}\n\nclass AddWeightIngredient extends Component<AddIngredientProps, AddWeightIngredientState> {\n  constructor(props: AddIngredientProps) {\n    super(props);\n\n    this.state = {\n      name: '',\n      weightUnit: WeightUnit.grams,\n      weightAmount: 1,\n    }\n  }\n\n  onChangeName = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ name: event.target.value })\n  }\n\n  onChangeWeightUnit = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n    this.setState({ weightUnit: event.target.value as WeightUnit })\n  }\n\n  onChangeWeightAmount = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ weightAmount: +event.target.value })\n  }\n\n  valid = (): boolean => {\n    if ((this.state.name !== \"\") && (this.state.weightAmount > 0)) {\n      return false\n    }\n    return true\n  }\n\n  render(): JSX.Element {\n    const weightUnitsOptions: JSX.Element[] = []\n    for (const unit in WeightUnit) {\n      weightUnitsOptions.push(<option value={unit} key={unit}>{WeightUnitNames.get(unit)}</option>)\n    }\n\n    return (\n      <>\n        <div className=\"my-2\">\n          <label htmlFor=\"newIngredientName\" className=\"form-label\">Ingredient name:</label>\n          <input value={this.state.name} onChange={this.onChangeName} type=\"text\" className=\"form-control\" id=\"newIngredientName\" placeholder=\"e.g. flour, butter, salt...\" required />\n        </div>\n\n        <div className=\"mb-2\">\n          <label htmlFor=\"newIngredientUnit\" className=\"form-label\">Unit of weight:</label>\n          <select value={this.state.weightUnit} onChange={this.onChangeWeightUnit} id=\"newIngredientUnit\" className=\"form-select\">\n            {weightUnitsOptions}\n          </select>\n        </div>\n\n        <div className=\"mb-3\">\n          <label htmlFor=\"newIngredientAmount\" className=\"form-label\">Amount:</label>\n          <input value={this.state.weightAmount} onChange={this.onChangeWeightAmount} type=\"number\" min=\"0\" className=\"form-control\" id=\"newIngredientAmount\" placeholder=\"e.g. 2.5, 100...\" step=\"0.1\" required />\n        </div>\n\n        <button\n          className=\"btn btn-success\"\n          onClick={() => {\n            this.props.AddIngredientCallback(new Ingredient(\n              this.state.name,\n              new Weight(this.state.weightUnit, this.state.weightAmount),\n            ));\n          }}\n          disabled={this.valid()}\n        >\n          add ingredient\n        </button>\n      </>\n    );\n  }\n}\n\ninterface AddVolumeIngredientState {\n  name: string;\n  volumeUnit: VolumeUnit;\n  volumeAmount: number\n  volumeFoodType: VolumeFoodType;\n}\n\nclass AddVolumeIngredient extends Component<AddIngredientProps, AddVolumeIngredientState> {\n  constructor(props: AddIngredientProps) {\n    super(props);\n\n    this.state = {\n      name: '',\n      volumeUnit: VolumeUnit.milliliter,\n      volumeAmount: 1,\n      volumeFoodType: VolumeFoodType.allPurposeFlour,\n    }\n  }\n\n  onChangeName = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ name: event.target.value })\n  }\n\n  onChangeVolumeUnit = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n    this.setState({ volumeUnit: event.target.value as VolumeUnit })\n  }\n\n  onChangeVolumeAmount = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ volumeAmount: +event.target.value })\n  }\n\n  onChangeVolumeFoodType = (event: React.ChangeEvent<HTMLSelectElement>): void => {\n    this.setState({ volumeFoodType: event.target.value as VolumeFoodType })\n  }\n\n  valid = (): boolean => {\n    if ((this.state.name !== \"\") && (this.state.volumeAmount > 0)) {\n      return false\n    }\n    return true\n  }\n\n  render(): JSX.Element {\n    const volumeUnitsOptions: JSX.Element[] = []\n    for (const unit in VolumeUnit) {\n      volumeUnitsOptions.push(<option value={unit} key={unit}>{VolumeUnitNames.get(unit)}</option>)\n    }\n\n    const volumeFoodTypeOptions: JSX.Element[] = []\n    for (const foodType in VolumeFoodType) {\n      volumeFoodTypeOptions.push(<option value={foodType} key={foodType}>{VolumeFoodTypeNames.get(foodType)}</option>)\n    }\n\n    return (\n      <>\n        <div className=\"my-2\">\n          <label htmlFor=\"newVolumeIngredientName\" className=\"form-label\">Ingredient name:</label>\n          <input value={this.state.name} onChange={this.onChangeName} type=\"text\" className=\"form-control\" id=\"newVolumeIngredientName\" placeholder=\"e.g. milk, baking powder, salt...\" required />\n        </div>\n\n        <div className=\"mb-2\">\n          <label htmlFor=\"newVolumeIngredientUnit\" className=\"form-label\">Unit of volume:</label>\n          <select value={this.state.volumeUnit} onChange={this.onChangeVolumeUnit} id=\"newVolumeIngredientUnit\" className=\"form-select\">\n            {volumeUnitsOptions}\n          </select>\n        </div>\n\n        <div className=\"mb-3\">\n          <label htmlFor=\"newVolumeIngredientAmount\" className=\"form-label\">Amount:</label>\n          <input value={this.state.volumeAmount} onChange={this.onChangeVolumeAmount} type=\"number\" min=\"0\" className=\"form-control\" id=\"newVolumeIngredientAmount\" placeholder=\"e.g. 2.5, 100...\" step=\"0.1\" required />\n        </div>\n\n        <div className=\"mb-2\">\n          <label htmlFor=\"newVolumeIngredientFoodType\" className=\"form-label\">Type of food (used for density):</label>\n          <select value={this.state.volumeFoodType} onChange={this.onChangeVolumeFoodType} id=\"newVolumeIngredientFoodType\" className=\"form-select\">\n            {volumeFoodTypeOptions}\n          </select>\n        </div>\n\n        <button\n          className=\"btn btn-success\"\n          onClick={() => {\n            this.props.AddIngredientCallback(new Ingredient(\n              this.state.name,\n              new Volume(this.state.volumeUnit, this.state.volumeAmount, this.state.volumeFoodType),\n            ));\n          }}\n          disabled={this.valid()}\n        >\n          add ingredient\n        </button>\n      </>\n    )\n  }\n}\n\nfunction AddIngredient(props: AddIngredientProps): JSX.Element {\n  return (\n    <>\n      <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n        <li className=\"nav-item\" role=\"presentation\">\n          <a className=\"nav-link active\" id=\"weight-tab\" data-bs-toggle=\"tab\" href=\"#weight\" role=\"tab\" aria-controls=\"weight\" aria-selected=\"true\">Add Weight</a>\n        </li>\n        <li className=\"nav-item\" role=\"presentation\">\n          <a className=\"nav-link\" id=\"volume-tab\" data-bs-toggle=\"tab\" href=\"#volume\" role=\"tab\" aria-controls=\"volume\" aria-selected=\"false\">Add Volume</a>\n        </li>\n      </ul>\n\n      <div className=\"tab-content\" id=\"myTabContent\">\n\n        <div className=\"tab-pane fade show active\" id=\"weight\" role=\"tabpanel\" aria-labelledby=\"weight-tab\">\n          <AddWeightIngredient AddIngredientCallback={props.AddIngredientCallback} />\n        </div>\n\n        <div className=\"tab-pane fade\" id=\"volume\" role=\"tabpanel\" aria-labelledby=\"volume-tab\">\n          <AddVolumeIngredient AddIngredientCallback={props.AddIngredientCallback} />\n        </div>\n\n      </div>\n    </>\n  );\n}\n\nfunction ingredientDescription(ingredient: IngredientInterface): string {\n  const { amount, unitDescription } = ingredient.quantity.describe();\n  return `${ingredient.name} = ${amount} (${unitDescription})`;\n}\n\nfunction IngredientList(props: { ingredients: IngredientInterface[] }): JSX.Element {\n  return (\n    <ul>\n      {props.ingredients.map((ingredient, index) => <li key={index}>{ingredientDescription(ingredient)}</li>)}\n    </ul>\n  );\n}\n\nfunction IngredientListDeletable(props: { ingredients: IngredientInterface[], deletionCallback: (index: number) => void }): JSX.Element {\n  return (\n    <ul>\n      {props.ingredients.map((ingredient, index) => {\n        return <li className=\"mb-1\" key={index}>{ingredientDescription(ingredient)} <button className=\"btn btn-sm btn-danger\" onClick={() => { props.deletionCallback(index) }}>remove</button></li>\n      })}\n    </ul>\n  );\n}\n\ninterface AdjustedIngredientsProps {\n  ingredients: IngredientInterface[];\n}\n\ninterface AdjustedIngredientsState {\n  adjustedAmount: number;\n}\n\nclass AdjustedIngredients extends Component<AdjustedIngredientsProps, AdjustedIngredientsState> {\n  constructor(props: AdjustedIngredientsProps) {\n    super(props);\n\n    this.state = {\n      adjustedAmount: 100\n    }\n  }\n\n  onScale = (event: React.ChangeEvent<HTMLInputElement>): void => {\n    this.setState({ adjustedAmount: +event.target.value })\n  }\n\n  totalAmount = (ingredients: IngredientInterface[]): number => {\n    return ingredients.reduce<number>(\n      (accumulator, ingredient) => { return accumulator + ingredient.quantity.cloneToGrams().describe().amount },\n      0,\n    )\n  }\n\n  render(): JSX.Element {\n    if (this.props.ingredients.length === 0)\n      return <></>;\n\n    const ingredientsInGrams = this.props.ingredients.map((ingredient: IngredientInterface): IngredientInterface => {\n      return ingredient.cloneToGrams();\n    })\n\n    const originalWeightGrams = ingredientsInGrams.reduce<number>(\n      (accumulator, ingredient) => { return accumulator + ingredient.quantity.describe().amount },\n      0,\n    )\n\n    const scaler = this.state.adjustedAmount / originalWeightGrams;\n\n    const scaledIngredientsInGrams = this.props.ingredients.map((ingredient: IngredientInterface): IngredientInterface => {\n      return ingredient.cloneToGrams().scale(scaler);\n    })\n\n    return (\n      <>\n        <p>Unaltered total weight (g): {originalWeightGrams}</p>\n\n        <div className=\"mb-2\">\n          <label htmlFor=\"desiredAmountInput\" className=\"form-label\">Desired total weight (g):</label>\n          <input value={this.state.adjustedAmount} onChange={this.onScale} type=\"number\" className=\"form-control\" id=\"desiredAmountInput\" min=\"0.1\" step=\"0.1\" required />\n        </div>\n\n        <h4>Adjusted ingredients:</h4>\n\n        <IngredientList ingredients={scaledIngredientsInGrams} />\n      </>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}