{"version":3,"sources":["Interfaces.ts","RecipeStore.tsx","App.tsx","index.tsx"],"names":["TypeDiscriminators","VolumeUnit","VolumeFoodType","toRecipe","rd","ingredients","map","ingredientData","undefined","obj","type","IngredientVolume","Volume","vd","unit","amount","density","name","wd","IngredientWeight","isWeightDataInterface","Weight","Error","RecipeV1","method","WeightUnit","CONVERSION_TO_MILLILITER","GRAMS_PER_MILLILITER","Map","this","scaler","mlAmount","gramAmount","units","LoadDeleteSavedRecipes","props","useState","getSavedRecipesFromBrowser","savedRecipes","setSavedRecipes","useEffect","storageChangeListener","console","log","window","addEventListener","removeEventListener","selectedRecipe","setSelectedRecipe","length","recipeOptions","recipe","push","value","className","onChange","e","target","aria-label","onClick","recipeLoadedCallback","title","recipeStr","localStorage","getItem","JSON","parse","loadRecipeFromBrowser","removeItem","dispatchEvent","Event","SaveRecipe","saveName","setSaveName","saveFunc","setItem","stringify","saveRecipeToBrowser","htmlFor","id","placeholder","RecipeStorage","recipeName","setRecipeName","key","startsWith","slice","RecipeSlicer","setIngredients","header","AddIngredient","AddIngredientCallback","ingredient","concat","footer","href","IngredientListDelete","deletionCallback","index","ingredientsCopy","splice","IngredientList","cloneToGrams","AdjustedIngredients","AddWeightIngredient","setName","weightUnit","setWeightUnit","weightAmount","setWeightAmount","weightUnitsOptions","required","min","step","disabled","AddVolumeIngredient","volumeUnit","setVolumeUnit","volumeAmount","setVolumeAmount","volumeFoodType","setVolumeFoodType","volumeDensity","setVolumeDensity","volumeUnitsOptions","volumeFoodTypeOptions","foodType","get","role","data-bs-toggle","aria-controls","aria-selected","aria-labelledby","ingredientDescription","describe","desiredGrams","useDesiredGrams","originalWeightGrams","reduce","accumulator","scaledIngredientsInGrams","scale","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b3bd0795.chunk.js","sourcesContent":["// **************************** Data interfaces for JSON parsing\n\nexport interface RecipeDataInterface {\n    type: TypeDiscriminators.RecipeV1;\n    name: string;\n    ingredients: Array<VolumeDataInterface | WeightDataInterface>[];\n    method: string[];\n}\n\nexport function toRecipe(rd: RecipeDataInterface): RecipeInterface {\n    const ingredients = rd.ingredients.map((ingredientData) => {\n        if (isVolumeDataInterface(ingredientData))\n            return toVolume(ingredientData)\n        if (isWeightDataInterface(ingredientData))\n            return toWeight(ingredientData)\n        throw new Error(\"Unexpected ingredient type\");\n    })\n\n    return {\n        type: TypeDiscriminators.RecipeV1,\n        name: rd.name,\n        ingredients: ingredients,\n        method: rd.method,\n    };\n}\n\ninterface VolumeDataInterface {\n    readonly type: TypeDiscriminators.IngredientVolume;\n    readonly name: string;\n    readonly unit: VolumeUnit;\n    readonly amount: number;\n    readonly density: number;\n}\n\nfunction isVolumeDataInterface(obj: unknown): obj is VolumeDataInterface {\n    return (((obj as VolumeDataInterface).type !== undefined) && ((obj as VolumeDataInterface).type === TypeDiscriminators.IngredientVolume));\n}\n\nfunction toVolume(vd: VolumeDataInterface): Volume {\n    return new Volume(vd.unit, vd.amount, vd.density, vd.name)\n}\n\ninterface WeightDataInterface {\n    readonly type: TypeDiscriminators.IngredientWeight;\n    readonly name: string;\n    readonly unit: WeightUnit;\n    readonly amount: number;\n}\n\nfunction isWeightDataInterface(obj: unknown): obj is WeightDataInterface {\n    return (((obj as WeightDataInterface).type !== undefined) && ((obj as WeightDataInterface).type === TypeDiscriminators.IngredientWeight));\n}\n\nfunction toWeight(wd: WeightDataInterface): Weight {\n    return new Weight(wd.unit, wd.amount, wd.name)\n}\n\n// **************************** Data interfaces for JSON parsing\n\nexport interface RecipeInterface {\n    type: TypeDiscriminators.RecipeV1;\n    name: string;\n    ingredients: IngredientInterface[];\n    method: string[];\n}\n\nexport function newRecipe(name: string, ingredients: IngredientInterface[], method: string[]): RecipeInterface {\n    return ({\n        type: TypeDiscriminators.RecipeV1,\n        name: name,\n        ingredients: ingredients,\n        method: method,\n    });\n}\n\nexport interface IngredientInterface {\n    readonly type: TypeDiscriminators;\n    readonly name: string;\n    cloneToGrams(): IngredientInterface;\n    scale(scalar: number): IngredientInterface;\n    describe(): { amount: number, units: string };\n}\n\nenum TypeDiscriminators {\n    IngredientWeight = 'IngredientWeight',\n    IngredientVolume = 'IngredientVolume',\n    RecipeV1 = 'RecipeV1',\n}\n\n// ************************* Volume\n\nexport enum VolumeUnit {\n    'Milliliter' = 'Milliliter',\n    'Pint (US)' = 'Pint (US)',\n    'Cup (US)' = 'Cup (US)',\n    'Fluid Ounce (US)' = 'Fluid Ounce (US)',\n    'Tablespoon (US)' = 'Tablespoon (US)',\n    'Teaspoon (US)' = 'Teaspoon (US)',\n    'Pint (Imperial)' = 'Pint (Imperial)',\n    'Cup (Imperial)' = 'Cup (Imperial)',\n    'Fluid Ounce (Imperial)' = 'Fluid Ounce (Imperial)',\n    'Tablespoon (Imperial)' = 'Tablespoon (Imperial)',\n    'Teaspoon (Imperial)' = 'Teaspoon (Imperial)',\n}\n\nexport enum VolumeFoodType {\n    'custom' = 'custom',\n    'baking powder' = \"baking powder\",\n    'baking soda' = \"baking soda\",\n    'salt' = \"salt\",\n    'yeast' = \"yeast\",\n    'sugar' = \"sugar\",\n    'all purpose flour' = \"all purpose flour\",\n    'bread flour' = \"bread flour\",\n    'whole wheat flour' = 'whole wheat flour',\n    'water' = \"water\",\n    'butter' = \"butter\",\n    'milk' = \"milk\",\n    'cocoa powder' = \"cocoa powder\",\n    'yogurt' = \"yogurt\",\n}\n\nconst CONVERSION_TO_MILLILITER = {\n    'Pint (US)': 473.176,\n    'Cup (US)': 240,\n    'Fluid Ounce (US)': 29.5735,\n    'Tablespoon (US)': 14.7868,\n    'Teaspoon (US)': 4.92892,\n    'Pint (Imperial)': 568.261,\n    'Cup (Imperial)': 284.131,\n    'Fluid Ounce (Imperial)': 28.4131,\n    'Tablespoon (Imperial)': 17.7582,\n    'Teaspoon (Imperial)': 5.91939,\n}\n\nexport const GRAMS_PER_MILLILITER = new Map([\n    ['baking powder', 0.9],\n    ['baking soda', 0.689],\n    ['salt', 1.201],\n    ['yeast', 0.95],\n    ['sugar', 0.849],\n    ['all purpose flour', 0.529],\n    ['bread flour', 0.55],\n    // https://www.kingarthurbaking.com/learn/ingredient-weight-chart\n    ['whole wheat flour', 0.471],\n    ['water', 1],\n    ['butter', 0.959],\n    ['milk', 1.035],\n    ['cocoa powder', 0.641],\n    ['yogurt', 1.06],\n]);\n\n\nexport class Volume implements IngredientInterface, VolumeDataInterface {\n    type: TypeDiscriminators.IngredientVolume;\n    unit: VolumeUnit;\n    amount: number;\n    density: number;\n    name: string;\n\n    constructor(unit: VolumeUnit, amount: number, density: number, name: string) {\n        this.type = TypeDiscriminators.IngredientVolume;\n        this.unit = unit;\n        this.amount = amount;\n        this.density = density;\n        this.name = name;\n    }\n\n    scale(scaler: number): Volume {\n        this.amount = this.amount * scaler;\n        return this;\n    }\n\n    cloneToGrams(): Weight {\n        let mlAmount = 0;\n        switch (this.unit) {\n            case VolumeUnit['Milliliter']:\n                mlAmount = this.amount\n                break;\n            case VolumeUnit['Pint (US)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Pint (US)'];\n                break;\n            case VolumeUnit['Cup (US)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Cup (US)'];\n                break;\n            case VolumeUnit['Fluid Ounce (US)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Fluid Ounce (US)'];\n                break;\n            case VolumeUnit['Tablespoon (US)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Tablespoon (US)'];\n                break;\n            case VolumeUnit['Teaspoon (US)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Teaspoon (US)'];\n                break;\n            case VolumeUnit['Pint (Imperial)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Pint (Imperial)'];\n                break;\n            case VolumeUnit['Cup (Imperial)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Cup (Imperial)'];\n                break;\n            case VolumeUnit['Fluid Ounce (Imperial)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Fluid Ounce (Imperial)'];\n                break;\n            case VolumeUnit['Tablespoon (Imperial)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Tablespoon (Imperial)'];\n                break;\n            case VolumeUnit['Teaspoon (Imperial)']:\n                mlAmount = this.amount * CONVERSION_TO_MILLILITER['Teaspoon (Imperial)'];\n                break;\n        }\n\n        const gramAmount = mlAmount * this.density;\n        return new Weight(WeightUnit['Grams'], gramAmount, this.name);\n    }\n\n    describe(): { amount: number, units: string } {\n        return { amount: this.amount, units: `${this.unit} at ${this.density} Grams per Milliliter` }\n    }\n}\n\n// ************************* Weight\n\nconst OUNCES_TO_GRAMS = 28.3495\nconst EGGS_XL_EU_TO_GRAMS = 73\nconst EGGS_LG_EU_TO_GRAMS = 63\nconst EGGS_MD_EU_TO_GRAMS = 53\nconst EGGS_JB_USA_TO_GRAMS = 70.9\nconst EGGS_XL_USA_TO_GRAMS = 63.8\nconst EGGS_LG_USA_TO_GRAMS = 56.7\nconst EGGS_MD_USA_TO_GRAMS = 49.6\nconst EGGS_SM_USA_TO_GRAMS = 42.5\nconst EGGS_PW_USA_TO_GRAMS = 35.4\n\nexport enum WeightUnit {\n    'Grams' = 'Grams',\n    'Ounces' = 'Ounces',\n    'Eggs (XL Europe)' = 'Eggs (XL Europe)',\n    'Eggs (Large Europe)' = 'Eggs (Large Europe)',\n    'Eggs (Medium Europe)' = 'Eggs (Medium Europe)',\n    'Eggs (Jumbo USA)' = 'Eggs (Jumbo USA)',\n    'Eggs (XL USA)' = 'Eggs (XL USA)',\n    'Eggs (Large USA)' = 'Eggs (Large USA)',\n    'Eggs (Medium USA)' = 'Eggs (Medium USA)',\n    'Eggs (Small USA)' = 'Eggs (Small USA)',\n    'Eggs (Peewee USA)' = 'Eggs (Peewee USA)',\n}\n\n\nexport class Weight implements IngredientInterface, WeightDataInterface {\n    unit: WeightUnit;\n    amount: number;\n    type: TypeDiscriminators.IngredientWeight;\n    name: string;\n\n    constructor(unit: WeightUnit, amount: number, name: string) {\n        this.type = TypeDiscriminators.IngredientWeight;\n        this.unit = unit;\n        this.amount = amount;\n        this.name = name;\n    }\n\n    scale(scaler: number): Weight {\n        this.amount = this.amount * scaler;\n        return this;\n    }\n\n    cloneToGrams(): Weight {\n        let amount = 0;\n        switch (this.unit) {\n            case WeightUnit['Grams']:\n                amount = this.amount;\n                break;\n            case WeightUnit['Ounces']:\n                amount = this.amount * OUNCES_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (XL Europe)']:\n                amount = this.amount * EGGS_XL_EU_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Large Europe)']:\n                amount = this.amount * EGGS_LG_EU_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Medium Europe)']:\n                amount = this.amount * EGGS_MD_EU_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Jumbo USA)']:\n                amount = this.amount * EGGS_JB_USA_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (XL USA)']:\n                amount = this.amount * EGGS_XL_USA_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Large USA)']:\n                amount = this.amount * EGGS_LG_USA_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Medium USA)']:\n                amount = this.amount * EGGS_MD_USA_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Small USA)']:\n                amount = this.amount * EGGS_SM_USA_TO_GRAMS;\n                break;\n            case WeightUnit['Eggs (Peewee USA)']:\n                amount = this.amount * EGGS_PW_USA_TO_GRAMS;\n                break;\n        }\n        return new Weight(WeightUnit['Grams'], amount, this.name);\n    }\n\n    describe(): { amount: number, units: string } {\n        return { amount: this.amount, units: this.unit }\n    }\n}\n","import { useEffect, useState } from \"react\";\nimport { IngredientInterface, newRecipe, RecipeDataInterface, RecipeInterface, toRecipe } from \"./Interfaces\";\n\nexport function LoadDeleteSavedRecipes(props: { recipeLoadedCallback: (recipe: RecipeInterface) => void }): JSX.Element | null {\n    const [savedRecipes, setSavedRecipes] = useState<string[]>(getSavedRecipesFromBrowser());\n    useEffect(() => {\n        const storageChangeListener = (): void => {\n            console.log(\"storage event fired, reloading saved recipe\");\n            setSavedRecipes(getSavedRecipesFromBrowser())\n        }\n\n        console.log(\"set event listener on storage events\");\n        window.addEventListener('storage', storageChangeListener)\n\n        return function cleanup() {\n            console.log(\"remove event listener on storage events\");\n            window.removeEventListener('storage', storageChangeListener);\n        };\n    }, []);\n\n    const [selectedRecipe, setSelectedRecipe] = useState<string>(savedRecipes[0]);\n    useEffect(() => {\n        setSelectedRecipe(savedRecipes[0])\n    }, [savedRecipes])\n\n    if (savedRecipes.length === 0)\n        return null;\n\n    const recipeOptions: JSX.Element[] = []\n    for (const recipe of savedRecipes) {\n        recipeOptions.push(<option value={recipe} key={recipe}>{recipe}</option>)\n    }\n\n    return <>\n        Saved recipes:\n        <select className=\"form-select\" onChange={(e) => {\n            setSelectedRecipe(e.target.value)\n        }} value={selectedRecipe} aria-label=\"Existing recipes\">\n            {recipeOptions}\n        </select>\n        <button className=\"btn btn-primary mt-2\" onClick={() => {\n            props.recipeLoadedCallback(loadRecipeFromBrowser(selectedRecipe));\n        }}>Load</button>\n        <button className=\"btn btn-danger mt-2 mx-2\" onClick={() => {\n            deleteRecipeFromBrowser(selectedRecipe);\n        }}>Delete</button>\n    </>\n\n}\n\nexport function SaveRecipe(props: { name?: string, ingredients: IngredientInterface[] }): JSX.Element | null {\n    const [saveName, setSaveName] = useState<string>(props.name ? props.name : \"\");\n    useEffect(() => {\n        setSaveName(props.name ? props.name : \"\")\n    }, [props.name])\n\n    if (props.ingredients.length === 0)\n        return <p className=\"pt-3\">Add some ingredients ⬇️ to save your recipe</p>;\n\n    const saveFunc = () => {\n        const recipe = newRecipe(saveName, props.ingredients, []);\n        saveRecipeToBrowser(recipe);\n    }\n\n    return <>\n        <div className=\"my-2\">\n            <label htmlFor=\"SaveRecipeName\" className=\"form-label\">Current recipe name:</label>\n            <input value={saveName} onChange={(e) => setSaveName(e.target.value)} type=\"text\" className=\"form-control\" id=\"SaveRecipeName\" placeholder=\"recipe name here...\" />\n        </div>\n        <button className=\"btn btn-success\" onClick={() => { saveFunc() }}>Save Recipe</button>\n    </>\n}\n\nexport function RecipeStorage(props: { recipeLoadedCallback: (recipe: RecipeInterface) => void, ingredients: IngredientInterface[], method: string[] }): JSX.Element | null {\n    const [recipeName, setRecipeName] = useState(\"\");\n\n    return <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n        <h2>Save and load recipes</h2>\n        <LoadDeleteSavedRecipes\n            recipeLoadedCallback={(recipe) => {\n                setRecipeName(recipe.name);\n                props.recipeLoadedCallback(recipe);\n            }}\n        />\n        <SaveRecipe\n            ingredients={props.ingredients}\n            name={recipeName}\n        />\n    </div>\n}\n\nfunction loadRecipeFromBrowser(title: string): RecipeInterface {\n    const recipeStr = localStorage.getItem(`saved-recipe:${title}`);\n    if (recipeStr === null)\n        throw new Error(\"Cannot load recipe:\" + title);\n\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    const recipe: RecipeDataInterface = JSON.parse(recipeStr)\n\n    return toRecipe(recipe);\n}\n\nfunction saveRecipeToBrowser(recipe: RecipeInterface): void {\n    localStorage.setItem(`saved-recipe:${recipe.name}`, JSON.stringify(recipe));\n    // Storage events only fire on storage changes made by other windows, so we fire an event for this window too\n    window.dispatchEvent(new Event('storage'));\n}\n\nfunction deleteRecipeFromBrowser(title: string): void {\n    localStorage.removeItem(`saved-recipe:${title}`);\n    // Storage events only fire on storage changes made by other windows, so we fire an event for this window too\n    window.dispatchEvent(new Event('storage'));\n}\n\nfunction getSavedRecipesFromBrowser(): string[] {\n    const savedRecipes: string[] = [];\n    for (const key in localStorage) {\n        if (key.startsWith(\"saved-recipe:\")) {\n            savedRecipes.push(key.slice(13));\n        }\n    }\n    return savedRecipes;\n}\n","import React, { useState } from 'react';\nimport { GRAMS_PER_MILLILITER, IngredientInterface, RecipeInterface, Volume, VolumeFoodType, VolumeUnit, Weight, WeightUnit } from './Interfaces';\nimport { RecipeStorage } from './RecipeStore';\n\nfunction App(): JSX.Element {\n  return (\n    <div className=\"container py-4\">\n      <div className=\"row\">\n        <div className=\"col-12\">\n          <RecipeSlicer />\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction RecipeSlicer(): JSX.Element {\n  const [ingredients, setIngredients] = useState<IngredientInterface[]>([]);\n\n  const header = <>\n    <h1>Recipe Slicer</h1>\n    <h4>Convert recipes into grams and scale the total mix weight</h4>\n    <label>i.e. enter a giant cake mix in cups and fluid ounces, get out a recipe in grams that you can scale down to a cupcake size</label>\n    <br />\n\n    <RecipeStorage\n      ingredients={ingredients}\n      recipeLoadedCallback={(recipe: RecipeInterface) => {\n        setIngredients(recipe.ingredients)\n        return\n      }}\n      method={[]}\n    />\n\n    <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n      <h2>Add new ingredient</h2>\n      <AddIngredient\n        AddIngredientCallback={(ingredient: IngredientInterface) => {\n          setIngredients(ingredients.concat(ingredient))\n        }}\n      />\n    </div>\n  </>\n\n  const footer = <div className=\"border border-3 border-dark bg-light p-3 my-2 text-center\">\n    <h2>Feedback</h2>\n    <h4>\n      Like the tool? Have a feature or change suggestion? Found a bug?\n        <br />\n        Get in touch, I'd love to hear more: <a href=\"mailto:charlie@immaterium.ltd\">charlie@immaterium.ltd</a>\n    </h4>\n  </div>\n\n  if (ingredients.length === 0) {\n    return <>\n      {header}\n      {footer}\n    </>;\n  }\n  return (\n    <>\n      {header}\n\n      <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n        <h2>Original Ingredient Measurements</h2>\n        <IngredientListDelete ingredients={ingredients} deletionCallback={(index: number) => {\n          const ingredientsCopy = [...ingredients]\n          ingredientsCopy.splice(index, 1)\n          setIngredients(ingredientsCopy)\n        }} />\n      </div>\n\n      <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n        <h2>Ingredient amounts in Grams</h2>\n        <IngredientList ingredients={ingredients.map((ingredient) => { return ingredient.cloneToGrams() })} />\n      </div>\n\n      <div className=\"border border-3 border-dark bg-light p-3 my-2\">\n        <h2>Scaled Ingredients</h2>\n        <AdjustedIngredients ingredients={ingredients} />\n      </div>\n\n      {footer}\n    </>\n  );\n}\n\ninterface AddIngredientProps {\n  AddIngredientCallback: (ingredient: IngredientInterface) => void;\n}\n\nfunction AddWeightIngredient(props: AddIngredientProps): JSX.Element {\n  const [name, setName] = useState<string>('');\n  const [weightUnit, setWeightUnit] = useState<WeightUnit>(WeightUnit['Grams']);\n  const [weightAmount, setWeightAmount] = useState<number>(1);\n\n  const valid = (): boolean => {\n    if ((name !== \"\") && (weightAmount > 0)) {\n      return false\n    }\n    return true\n  }\n\n  const weightUnitsOptions: JSX.Element[] = []\n  for (const unit in WeightUnit) {\n    weightUnitsOptions.push(<option value={unit} key={unit}>{unit}</option>)\n  }\n\n  return (\n    <>\n      <div className=\"my-2\">\n        <label htmlFor=\"newIngredientName\" className=\"form-label\">Ingredient name:</label>\n        <input value={name} onChange={(e) => setName(e.target.value)} type=\"text\" className=\"form-control\" id=\"newIngredientName\" placeholder=\"e.g. flour, butter, salt...\" required />\n      </div>\n\n      <div className=\"mb-2\">\n        <label htmlFor=\"newIngredientUnit\" className=\"form-label\">Unit of weight:</label>\n        <select value={weightUnit} onChange={(e) => setWeightUnit(e.target.value as WeightUnit)} id=\"newIngredientUnit\" className=\"form-select\">\n          {weightUnitsOptions}\n        </select>\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"newIngredientAmount\" className=\"form-label\">Amount:</label>\n        <input value={weightAmount} onChange={(e) => setWeightAmount(+e.target.value)} type=\"number\" min=\"0\" className=\"form-control\" id=\"newIngredientAmount\" placeholder=\"e.g. 2.5, 100...\" step=\"0.1\" required />\n      </div>\n\n      <button\n        className=\"btn btn-success\"\n        onClick={() => {\n          props.AddIngredientCallback(new Weight(\n            weightUnit,\n            weightAmount,\n            name,\n          ));\n        }}\n        disabled={valid()}\n      >\n        add ingredient\n        </button>\n    </>\n  );\n}\n\nfunction AddVolumeIngredient(props: AddIngredientProps): JSX.Element {\n  const [name, setName] = useState<string>('');\n  const [volumeUnit, setVolumeUnit] = useState<VolumeUnit>(VolumeUnit['Milliliter']);\n  const [volumeAmount, setVolumeAmount] = useState<number>(1);\n  const [volumeFoodType, setVolumeFoodType] = useState<VolumeFoodType>(VolumeFoodType['custom']);\n  const [volumeDensity, setVolumeDensity] = useState<number>(1);\n\n  const valid = (): boolean => {\n    if ((name !== \"\") && (volumeAmount > 0)) {\n      return false\n    }\n    return true\n  }\n\n  const volumeUnitsOptions: JSX.Element[] = []\n  for (const unit in VolumeUnit) {\n    volumeUnitsOptions.push(<option value={unit} key={unit}>{unit}</option>)\n  }\n\n  const volumeFoodTypeOptions: JSX.Element[] = []\n  for (const foodType in VolumeFoodType) {\n    volumeFoodTypeOptions.push(<option value={foodType} key={foodType}>{foodType}</option>)\n  }\n\n  return (\n    <>\n      <div className=\"my-2\">\n        <label htmlFor=\"newVolumeIngredientName\" className=\"form-label\">Ingredient name:</label>\n        <input value={name} onChange={(e) => setName(e.target.value)} type=\"text\" className=\"form-control\" id=\"newVolumeIngredientName\" placeholder=\"e.g. milk, baking powder, salt...\" required />\n      </div>\n\n      <div className=\"mb-2\">\n        <label htmlFor=\"newVolumeIngredientUnit\" className=\"form-label\">Unit of volume:</label>\n        <select value={volumeUnit} onChange={(e) => setVolumeUnit(e.target.value as VolumeUnit)} id=\"newVolumeIngredientUnit\" className=\"form-select\">\n          {volumeUnitsOptions}\n        </select>\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"newVolumeIngredientAmount\" className=\"form-label\">Amount:</label>\n        <input value={volumeAmount} onChange={(e) => setVolumeAmount(+e.target.value)} type=\"number\" min=\"0\" className=\"form-control\" id=\"newVolumeIngredientAmount\" placeholder=\"e.g. 2.5, 100...\" step=\"0.1\" required />\n      </div>\n\n      <div className=\"mb-2\">\n        <label htmlFor=\"newVolumeIngredientFoodType\" className=\"form-label\">Type of food (used for density):</label>\n        <select value={volumeFoodType} onChange={(e) => {\n          setVolumeFoodType(e.target.value as VolumeFoodType)\n          if (e.target.value !== \"custom\") {\n            setVolumeDensity(GRAMS_PER_MILLILITER.get(e.target.value) || 1)\n          }\n        }} id=\"newVolumeIngredientFoodType\" className=\"form-select\">\n          {volumeFoodTypeOptions}\n        </select>\n      </div>\n\n      <div className=\"mb-3\">\n        <label htmlFor=\"newVolumeIngredientDensity\" className=\"form-label\">Density (Grams per Milliliter):</label>\n        <input disabled={volumeFoodType !== \"custom\"} value={volumeDensity} onChange={(e) => setVolumeDensity(+e.target.value)} type=\"number\" min=\"0\" className=\"form-control\" id=\"newVolumeIngredientDensity\" placeholder=\"e.g. 2.5, 100...\" step=\"0.1\" required />\n        <div id=\"newVolumeIngredientDensity\" className=\"form-text\">Set \"Type of food\" to custom to manually edit this amount</div>\n      </div>\n\n      <button\n        className=\"btn btn-success\"\n        onClick={() => {\n          props.AddIngredientCallback(new Volume(volumeUnit, volumeAmount, volumeDensity, name));\n        }}\n        disabled={valid()}\n      >\n        add ingredient\n      </button>\n    </>\n  );\n}\n\nfunction AddIngredient(props: AddIngredientProps): JSX.Element {\n  return (\n    <>\n      <ul className=\"nav nav-tabs\" id=\"myTab\" role=\"tablist\">\n        <li className=\"nav-item\" role=\"presentation\">\n          <a className=\"nav-link active\" id=\"weight-tab\" data-bs-toggle=\"tab\" href=\"#weight\" role=\"tab\" aria-controls=\"weight\" aria-selected=\"true\"><b>Add Weight</b><br />e.g. grams<br />or eggs</a>\n        </li>\n        <li className=\"nav-item\" role=\"presentation\">\n          <a className=\"nav-link\" id=\"volume-tab\" data-bs-toggle=\"tab\" href=\"#volume\" role=\"tab\" aria-controls=\"volume\" aria-selected=\"false\"><b>Add Volume</b><br />e.g. cups or<br />fluid ounces</a>\n        </li>\n      </ul>\n\n      <div className=\"tab-content\" id=\"myTabContent\">\n\n        <div className=\"tab-pane fade show active\" id=\"weight\" role=\"tabpanel\" aria-labelledby=\"weight-tab\">\n          <AddWeightIngredient AddIngredientCallback={props.AddIngredientCallback} />\n        </div>\n\n        <div className=\"tab-pane fade\" id=\"volume\" role=\"tabpanel\" aria-labelledby=\"volume-tab\">\n          <AddVolumeIngredient AddIngredientCallback={props.AddIngredientCallback} />\n        </div>\n\n      </div>\n    </>\n  );\n}\n\nfunction ingredientDescription(ingredient: IngredientInterface): string {\n  const { amount, units } = ingredient.describe();\n  return `${ingredient.name} = ${amount} (${units})`;\n}\n\nfunction IngredientList(props: { ingredients: IngredientInterface[] }): JSX.Element {\n  return (\n    <ul>\n      {props.ingredients.map((ingredient, index) => <li key={index}>{ingredientDescription(ingredient)}</li>)}\n    </ul>\n  );\n}\n\nfunction IngredientListDelete(props: { ingredients: IngredientInterface[], deletionCallback: (index: number) => void }): JSX.Element {\n  return (\n    <ul>\n      {props.ingredients.map((ingredient, index) => {\n        return <li className=\"mb-1\" key={index}>{ingredientDescription(ingredient)} <button className=\"btn btn-sm btn-danger\" onClick={() => { props.deletionCallback(index) }}>remove</button></li>\n      })}\n    </ul>\n  );\n}\n\nfunction AdjustedIngredients(props: { ingredients: IngredientInterface[] }): JSX.Element {\n  const [desiredGrams, useDesiredGrams] = useState<number>(100);\n\n  if (props.ingredients.length === 0)\n    return <></>;\n\n  const ingredientsInGrams = props.ingredients.map((ingredient: IngredientInterface): IngredientInterface => {\n    return ingredient.cloneToGrams();\n  })\n\n  const originalWeightGrams = ingredientsInGrams.reduce<number>(\n    (accumulator, ingredient) => { return accumulator + ingredient.describe().amount },\n    0,\n  )\n\n  const scaler = desiredGrams / originalWeightGrams;\n\n  const scaledIngredientsInGrams = props.ingredients.map((ingredient: IngredientInterface): IngredientInterface => {\n    return ingredient.cloneToGrams().scale(scaler);\n  })\n\n  return (\n    <>\n      <p>Unaltered total weight (g): {originalWeightGrams}</p>\n\n      <div className=\"mb-2\">\n        <label htmlFor=\"desiredAmountInput\" className=\"form-label\">Desired total weight (g):</label>\n        <input value={desiredGrams} onChange={(e) => useDesiredGrams(+e.target.value)} type=\"number\" className=\"form-control\" id=\"desiredAmountInput\" min=\"0.1\" step=\"0.1\" required />\n      </div>\n\n      <h4>Adjusted ingredients:</h4>\n\n      <IngredientList ingredients={scaledIngredientsInGrams} />\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}